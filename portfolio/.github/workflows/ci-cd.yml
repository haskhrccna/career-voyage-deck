name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: |
          npm run build
          ls -la dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"'

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            
            echo "1. Current running containers:"
            docker ps -a
            
            echo "2. Stopping all containers:"
            docker-compose down
            docker stop $(docker ps -a -q) || true
            
            echo "3. Checking port 80:"
            sudo netstat -tulpn | grep :80 || true
            
            echo "4. Checking and killing any process using port 80:"
            sudo lsof -i :80 || true
            sudo fuser -k 80/tcp || true
            
            echo "5. Removing old containers and images:"
            docker system prune -af
          '
          
          echo "6. Copying files to server..."
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/
          
          echo "7. Copying dist directory..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p /app/dist'
          scp -i ~/.ssh/deploy_key -r dist/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/
          
          echo "8. Starting services..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            
            docker-compose --verbose up -d --build --force-recreate
            
            echo "9. Waiting for services:"
            sleep 15
            
            echo "10. Container status:"
            docker ps -a
            
            echo "11. Container logs:"
            docker-compose logs
            
            echo "12. Testing nginx:"
            curl -v http://localhost:80/test || true
            
            echo "13. Container network info:"
            docker network inspect app_network || true
            
            echo "14. Container IP:"
            docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" web_app
          '

      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            curl -X POST \
            -H "Authorization: Bearer $RESEND_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.resend.com/emails \
            -d '{
              "from": "notifications@hassan-adam.com",
              "to": "haskhr@hotmail.com",
              "subject": "Deployment Status: ${{ job.status }}",
              "html": "Deployment Status: ${{ job.status }}<br>Repository: ${{ github.repository }}<br>Commit: ${{ github.sha }}<br>Triggered by: ${{ github.actor }}"
            }'
          else
            echo "RESEND_API_KEY not set, skipping email notification"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
