name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci
          npm install @vitejs/plugin-react-swc vite @types/node --save-dev

      - name: Build
        run: |
          echo "=== Starting Build Process ==="
          rm -rf dist
          npm run build --verbose
          
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "Error: Build failed - critical files missing"
            exit 1
          fi
          
          echo "Build output contents:"
          find dist -type f -exec ls -l {} \;

      - name: Setup SSH
        run: |
          # Create .ssh directory with proper permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Clean up any existing keys
          rm -f ~/.ssh/deploy_key*
          
          # Write the SSH key with proper line endings
          echo "${{ secrets.DEPLOY_SSH_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          
          # Set restrictive permissions on the key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host key scanning with specific options
          ssh-keyscan -t rsa -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null
          
          # Verify the SSH key format
          echo "Verifying SSH key format..."
          ssh-keygen -l -f ~/.ssh/deploy_key || {
            echo "Error: Invalid SSH key format"
            exit 1
          }
          
          # Test SSH connection
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"' || {
            echo "Error: SSH connection failed"
            echo "Debug information:"
            ls -la ~/.ssh/
            ssh -v -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}
            exit 1
          }

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment script with detailed error handling
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          cd /app
          
          echo "Starting deployment process..."
          
          # Deployment commands...
          EOF
          
          chmod +x deploy.sh
          
          # Use script to ensure proper handling of SSH session
          script -q -c "
            # Copy deployment files with verbose output
            scp -v -i ~/.ssh/deploy_key \
              docker-compose.yml Dockerfile nginx.conf deploy.sh \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/
          " /dev/null || {
            echo "Error: Failed to copy deployment files"
            exit 1
          }
          
          # Copy application files
          script -q -c "
            ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p /app/dist' && \
            scp -v -i ~/.ssh/deploy_key -r \
              dist/* \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/
          " /dev/null || {
            echo "Error: Failed to copy application files"
            exit 1
          }
          
          # Execute deployment
          script -q -c "
            ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
              'cd /app && bash deploy.sh'
          " /dev/null || {
            echo "Error: Failed to execute deployment script"
            exit 1
          }

      - name: Cleanup
        if: always()
        run: |
          # Secure cleanup of sensitive files
          rm -f ~/.ssh/deploy_key*
          rm -f deploy.sh
