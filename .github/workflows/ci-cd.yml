name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: |
          npm run build
          ls -la dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup SSH
        run: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write the private key to a file
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add the host key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Debug SSH setup (optional)
          ls -la ~/.ssh
          echo "SSH directory contents:"
          ls -la ~/.ssh/

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"'

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Setup server
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            # Create app directory
            sudo mkdir -p /app
            sudo chown -R $USER:$USER /app
            
            # Setup Docker permissions
            sudo usermod -aG docker $USER
            sudo chmod 666 /var/run/docker.sock
            
            # Stop any process using port 80
            echo "Checking and stopping processes on port 80..."
            sudo lsof -t -i:80 | xargs -r sudo kill -9
            
            # Stop Apache2 if it exists and is running
            if systemctl is-active --quiet apache2; then
              echo "Stopping Apache2..."
              sudo systemctl stop apache2
              sudo systemctl disable apache2
            fi
            
            # Stop Nginx if it exists and is running
            if systemctl is-active --quiet nginx; then
              echo "Stopping Nginx..."
              sudo systemctl stop nginx
              sudo systemctl disable nginx
            fi
            
            # Double check port 80 is free
            if lsof -Pi :80 -sTCP:LISTEN -t >/dev/null ; then
              echo "Port 80 is still in use. Forcing cleanup..."
              sudo lsof -i :80 | awk "NR!=1 {print $2}" | xargs -r sudo kill -9
            fi
          '
          
          # Copy files
          echo "Copying files to server..."
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/
          
          # Copy dist directory
          echo "Copying dist directory..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p /app/dist'
          scp -i ~/.ssh/deploy_key -r dist/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/
          
          # Deploy
          echo "Deploying application..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            
            # Stop and remove existing containers
            docker-compose down -v || true
            
            # Remove all stopped containers and unused images
            docker system prune -af || true
            
            # Clean up any remaining Docker resources
            docker container prune -f
            docker network prune -f
            docker volume prune -f
            
            # Verify port 80 is free
            echo "Verifying port 80 is free..."
            if lsof -Pi :80 -sTCP:LISTEN -t >/dev/null ; then
              echo "Port 80 is still in use. Final cleanup attempt..."
              sudo lsof -i :80 | awk "NR!=1 {print $2}" | xargs -r sudo kill -9
            fi
            
            # Start services
            echo "Starting services..."
            docker-compose up -d --build --force-recreate
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 10
            
            # Check container status
            echo "Container status:"
            docker ps -a
            
            # Check logs
            echo "Container logs:"
            docker-compose logs
            
            # Check port usage
            echo "Port usage:"
            sudo lsof -i :80
            
            # Test nginx
            echo "Testing nginx..."
            curl -v http://localhost
          '

      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            curl -X POST \
            -H "Authorization: Bearer $RESEND_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.resend.com/emails \
            -d '{
              "from": "notifications@hassan-adam.com",
              "to": "haskhr@hotmail.com",
              "subject": "Deployment Status: ${{ job.status }}",
              "html": "Deployment Status: ${{ job.status }}<br>Repository: ${{ github.repository }}<br>Commit: ${{ github.sha }}<br>Triggered by: ${{ github.actor }}"
            }'
          else
            echo "RESEND_API_KEY not set, skipping email notification"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Remove SSH key
          rm -f ~/.ssh/deploy_key
          # Clean up any remaining Docker resources
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            if [ -f "docker-compose.yml" ]; then
              docker-compose down -v || true
            fi
            docker system prune -af || true
          ' || true
