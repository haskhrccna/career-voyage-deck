name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: |
        npm run build
        ls -la dist/
    
    - Name: Setup SSH and Deploy
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Debug: Print working directory
        pwd
        
        # Setup SSH with debug output
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add server to known hosts
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        
        # Test SSH connection
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection test successful"'
        
        # Create directory structure on server
        ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP '
          mkdir -p /app/dist
          sudo chown -R $USER:$USER /app
        '
        
        # Verify files exist before copying
        ls -la
        
        # Copy configuration files with verbose output
        scp -v -i ~/.ssh/deploy_key \
          docker-compose.yml \
          Dockerfile \
          nginx.conf \
          init.sql \
          .env \
          package.json \
          package-lock.json \
          $SERVER_USER@$SERVER_IP:/app/
        
        # Verify dist directory exists
        if [ ! -d "dist" ]; then
          echo "dist directory not found"
          exit 1
        fi
        
        # Copy build output with verbose output
        scp -v -i ~/.ssh/deploy_key -r \
          dist/* \
          $SERVER_USER@$SERVER_IP:/app/dist/
        
        # Verify files on server
        ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP '
          echo "Server directory contents:"
          ls -la /app
          echo "Dist directory contents:"
          ls -la /app/dist
        '
        
        # Deploy
        ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP '
          cd /app
          docker-compose down
          docker-compose up --build -d
        '
      env:
        DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}

    - name: Send Deployment Status Email
      if: always()
      run: |
        if [ -n "$RESEND_API_KEY" ]; then
          curl -X POST \
          -H "Authorization: Bearer $RESEND_API_KEY" \
          -H "Content-Type: application/json" \
          https://api.resend.com/emails \
          -d '{
            "from": "notifications@hassan-adam.com",
            "to": "haskhr@hotmail.com",
            "subject": "Deployment Status: ${{ job.status }}",
            "html": "Deployment Status: ${{ job.status }}<br>Repository: ${{ github.repository }}<br>Commit: ${{ github.sha }}<br>Triggered by: ${{ github.actor }}"
          }'
        else
          echo "RESEND_API_KEY not set, skipping email notification"
        fi
