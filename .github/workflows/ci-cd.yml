name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci
          npm install @vitejs/plugin-react-swc vite @types/node --save-dev

      - name: Build
        run: |
          echo "=== Starting Build Process ==="
          rm -rf dist
          npm run build --verbose
          
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "Error: Build failed - critical files missing"
            exit 1
          fi
          
          echo "Checking build output:"
          find dist -type f -exec ls -l {} \;

      - name: Setup and Debug SSH
        run: |
          # Clean up any existing SSH files
          rm -rf ~/.ssh
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
    
          # Write the key with echo, preserving any line breaks
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
    
          # Debug: Check key format (safely)
          echo "Checking key format..."
          if ! grep -q "BEGIN OPENSSH PRIVATE KEY" ~/.ssh/deploy_key; then
          echo "Error: Key is missing the expected header"
          echo "First line of key file (sanitized):"
          head -n 1 ~/.ssh/deploy_key | sed 's/.*/.../g'
          exit 1
          fi
    
          # Add the server to known hosts
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
    
          # Verify the key is readable
          echo "Checking key permissions..."
          ls -la ~/.ssh/deploy_key

      # Verify SSH connection before proceeding
      - name: Verify SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection test successful"'

      - name: Create Environment File
        run: |
          cat > .env << EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          EOF

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          cd /app

          echo "Ensuring required directories exist..."
          mkdir -p dist
          
          echo "Checking Docker volumes..."
          docker volume create --name=postgres_data
          docker volume create --name=nginx_logs

          echo "Stopping existing services..."
          docker-compose down -v || true

          echo "Pruning unused Docker resources..."
          docker system prune -af --force

          echo "Starting services..."
          docker-compose up -d --build --force-recreate

          echo "Waiting for services to initialize..."
          sleep 20

          echo "Verifying database connection..."
          if docker-compose exec -T db pg_isready -U $POSTGRES_USER; then
            echo "Database is ready"
          else
            echo "Database failed to initialize"
            docker-compose logs db
            exit 1
          fi

          echo "Checking web application..."
          if curl -f http://localhost >/dev/null 2>&1; then
            echo "Web application is responding"
          else
            echo "Web application failed to respond"
            docker-compose logs app
            exit 1
          fi

          echo "Deployment completed successfully"
          EOF

          chmod +x deploy.sh

          # Copy files in separate steps for better error handling
          echo "Copying configuration files..."
          scp -i ~/.ssh/deploy_key docker-compose.yml Dockerfile nginx.conf .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/

          echo "Copying deployment script..."
          scp -i ~/.ssh/deploy_key deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_USER }}:/app/

          echo "Creating dist directory..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /app/dist"

          echo "Copying application files..."
          scp -i ~/.ssh/deploy_key -r dist/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/

          echo "Executing deployment..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /app && chmod +x deploy.sh && ./deploy.sh"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deploy.sh
          rm -f .env
