name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Create tsconfig.json
      run: |
        echo '{
          "compilerOptions": {
            "target": "ES2020",
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": true,
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "resolveJsonModule": true,
            "isolatedModules": true,
            "noEmit": true,
            "jsx": "react-jsx",
            "strict": true,
            "noUnusedLocals": false,
            "noUnusedParameters": false,
            "noFallthroughCasesInSwitch": true,
            "baseUrl": ".",
            "paths": {
              "@/*": ["./src/*"]
            }
          },
          "include": ["src"]
        }' > tsconfig.json
    
    - name: Update vite.config.ts
      run: |
        cat > vite.config.ts << 'EOF'
        import { defineConfig } from "vite";
        import react from "@vitejs/plugin-react-swc";
        import path from "path";
        
        export default defineConfig({
          plugins: [react()],
          base: '',
          build: {
            outDir: 'dist',
            emptyOutDir: true,
            rollupOptions: {
              input: path.resolve(__dirname, 'index.html'),
              output: {
                entryFileNames: 'assets/[name].[hash].js',
                chunkFileNames: 'assets/[name].[hash].js',
                assetFileNames: 'assets/[name].[hash][extname]'
              }
            }
          },
          resolve: {
            alias: {
              "@": path.resolve(__dirname, "./src")
            }
          }
        });
        EOF
    
    - name: Build
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Building application..."
        npm run build
        echo "Build complete. Dist directory contents:"
        ls -la dist/
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
      
    - name: Build Docker Compose
      run: docker-compose build
      
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts
        
        # Copy files to server
        scp -i ~/.ssh/deploy_key \
          docker-compose.yml \
          Dockerfile \
          nginx.conf \
          init.sql \
          .env \
          package.json \
          package-lock.json \
          $SERVER_USER@$SERVER_IP:/app/
          
        # Copy the built application
        scp -i ~/.ssh/deploy_key -r \
          dist/* \
          $SERVER_USER@$SERVER_IP:/app/dist/
          
        # Deploy
        ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_IP '
          cd /app
          docker-compose down
          docker-compose up -d
        '
        
    - name: Send Deployment Status Email
      if: always()
      run: |
        curl -X POST \
        -H "Authorization: Bearer $RESEND_API_KEY" \
        -H "Content-Type: application/json" \
        https://api.resend.com/emails \
        -d '{
          "from": "notifications@yourdomain.com",
          "to": "haskhr@hotmail.com",
          "subject": "Deployment Status: ${{ job.status }}",
          "html": "Deployment Status: ${{ job.status }}<br>Repository: ${{ github.repository }}<br>Commit: ${{ github.sha }}<br>Triggered by: ${{ github.actor }}<br><br>View the deployment logs at:<br>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }'