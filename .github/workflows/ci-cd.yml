name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: |
          npm run build
          ls -la dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup SSH
        run: |
          # Create .ssh directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write the private key to a file
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add the host key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Debug SSH setup (optional)
          ls -la ~/.ssh
          echo "SSH directory contents:"
          ls -la ~/.ssh/

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'echo "SSH connection successful"'

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment directory
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            sudo mkdir -p /app
            sudo mkdir -p /app/dist
            sudo chown -R $USER:$USER /app
            sudo usermod -aG docker $USER
            sudo chown root:docker /var/run/docker.sock
            sudo chmod 660 /var/run/docker.sock
            sudo systemctl restart docker
          '
          
          # Copy files
          echo "Copying files to server..."
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/
          
          # Ensure dist directory exists and copy it
          echo "Copying dist directory..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p /app/dist'
          scp -i ~/.ssh/deploy_key -r dist/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/
          
          # Deploy application
          echo "Deploying application..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            
            # Clean up existing containers
            echo "Cleaning up existing containers..."
            docker-compose down -v || true
            
            # Remove old images
            echo "Removing old images..."
            docker system prune -af || true
            
            # Start services
            echo "Starting services..."
            DOCKER_DEFAULT_PLATFORM=linux/arm64/v8 docker-compose up -d --build --force-recreate
            
            # Wait for services to initialize
            echo "Waiting for services to initialize..."
            sleep 30
            
            # Check container status
            echo "Checking container status..."
            docker-compose ps
            
            # Display container logs
            echo "Container logs:"
            docker-compose logs
            
            # Check nginx configuration
            echo "Checking nginx configuration..."
            docker exec $(docker-compose ps -q nginx) nginx -t || true
            
            # Check if services are responding
            echo "Checking service health..."
            curl -v http://localhost || true
            
            # Display running containers
            echo "Running containers:"
            docker ps -a
            
            # Check disk space
            echo "Checking disk space..."
            df -h
          '

      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            curl -X POST \
            -H "Authorization: Bearer $RESEND_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.resend.com/emails \
            -d '{
              "from": "notifications@hassan-adam.com",
              "to": "haskhr@hotmail.com",
              "subject": "Deployment Status: ${{ job.status }}",
              "html": "Deployment Status: ${{ job.status }}<br>Repository: ${{ github.repository }}<br>Commit: ${{ github.sha }}<br>Triggered by: ${{ github.actor }}"
            }'
          else
            echo "RESEND_API_KEY not set, skipping email notification"
          fi

      - name: Cleanup
        if: always()
        run: |
          # Remove SSH key
          rm -f ~/.ssh/deploy_key
          # Clean up any remaining Docker resources
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            if [ -f "docker-compose.yml" ]; then
              docker-compose down -v || true
            fi
            docker system prune -af || true
          ' || true
