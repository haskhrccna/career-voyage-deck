# This is our main CI/CD pipeline configuration file. It handles the entire process
# of building, testing, and deploying our React application. The pipeline includes
# comprehensive error checking and detailed logging at each step.

name: CI/CD Pipeline

# Define when this workflow should run. We trigger it on pushes to the main branch
# and when pull requests target the main branch. This ensures our code is verified
# both during development and before deployment.
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables that will be used throughout the workflow.
# These variables help us maintain consistency and make updates easier.
env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/app'
  NGINX_CONTAINER: 'web_app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Set up environment variables, including sensitive data from GitHub secrets
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Install project dependencies and verify critical packages are present
      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci
          
          # Install specific required packages
          echo "Installing essential build dependencies..."
          npm install @vitejs/plugin-react-swc vite @types/node --save-dev
          
          # Verify critical dependencies
          echo "Verifying critical dependencies..."
          npm list vite @vitejs/plugin-react-swc react react-dom || true

      # Set up build configuration and verify project structure
      - name: Prepare build environment
        run: |
          echo "Creating Vite configuration..."
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react-swc'
          import path from 'path'

          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              sourcemap: true,
              rollupOptions: {
                output: {
                  manualChunks: {
                    'vendor': ['react', 'react-dom'],
                  }
                }
              }
            },
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src')
              }
            }
          })
          EOF
          
          echo "Vite configuration created successfully"

      # Build the application with detailed logging and verification
      - name: Build
        run: |
          echo "=== Starting Build Process ==="
          echo "Environment: Node $(node -v), npm $(npm -v)"
          
          # Clean previous build
          rm -rf dist
          
          # Execute build
          npm run build --verbose
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "Error: Build failed - dist directory not found"
            exit 1
          fi
          
          echo "Build directory contents:"
          ls -la dist/
          
          # Verify JavaScript bundles
          JS_FILES=$(find dist -name "*.js" | wc -l)
          if [ "$JS_FILES" -eq 0 ]; then
            echo "Error: No JavaScript bundles found in build output!"
            exit 1
          fi

      # Set up SSH for secure deployment
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      # Deploy the application if we're on the main branch
      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          cd /app

          # Ensure proper permissions
          sudo chown -R $USER:$USER .
          chmod 755 .
          chmod 600 .env

          # Stop existing services
          docker-compose down -v || true
          docker system prune -af --force || true

          # Start services
          docker-compose up -d --build --force-recreate

          # Verify deployment
          sleep 10
          if ! curl -s -f http://localhost:80 > /dev/null; then
            echo "Deployment verification failed"
            docker-compose logs
            exit 1
          fi

          echo "Deployment completed successfully"
          EOF

          # Copy files to server
          echo "Copying deployment files..."
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env deploy.sh \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/

          # Copy application files
          echo "Copying application files..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /app/dist"
          scp -i ~/.ssh/deploy_key -r \
            dist/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/dist/

          # Execute deployment
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "cd /app && chmod +x deploy.sh && ./deploy.sh"

      # Send email notification about deployment status
      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            DEPLOY_STATUS="${{ job.status }}"
            DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            curl -X POST \
              -H "Authorization: Bearer $RESEND_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.resend.com/emails \
              -d '{
                "from": "notifications@hassan-adam.com",
                "to": "haskhr@hotmail.com",
                "subject": "Deployment Status: '"$DEPLOY_STATUS"'",
                "html": "
                  <h2>Deployment Status: '"$DEPLOY_STATUS"'</h2>
                  <p><strong>Repository:</strong> '"${{ github.repository }}"'</p>
                  <p><strong>Branch:</strong> '"${GITHUB_REF#refs/heads/}"'</p>
                  <p><strong>Commit:</strong> '"${{ github.sha }}"'</p>
                  <p><strong>Triggered by:</strong> '"${{ github.actor }}"'</p>
                  <p><strong>Deployment Time:</strong> '"$DEPLOY_TIME"'</p>
                "
              }'
          fi

      # Clean up sensitive files
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deploy.sh
