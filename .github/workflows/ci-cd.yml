name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: |
          npm run build
          ls -la dist/

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment script with Docker permission handling
          cat << 'EOSSH' > deploy_remote.sh
          #!/bin/bash
          set -e

          # Function to check if user is in docker group
          check_docker_permissions() {
            echo "Checking Docker permissions..."
            if ! groups | grep -q docker; then
              echo "User is not in docker group. Adding user to docker group..."
              # Add user to docker group
              sudo usermod -aG docker $USER
              # Notify about group activation
              echo "User added to docker group. You may need to log out and back in for this to take effect."
              echo "For this session, we'll use sudo for Docker commands."
              return 1
            fi
            return 0
          }

          # Function to verify Docker socket permissions
          check_docker_socket() {
            echo "Checking Docker socket permissions..."
            if [ ! -S /var/run/docker.sock ]; then
              echo "Docker socket doesn't exist. Is Docker installed and running?"
              return 1
            fi
            
            SOCKET_PERMS=$(stat -c %a /var/run/docker.sock)
            if [ "$SOCKET_PERMS" != "660" ]; then
              echo "Fixing Docker socket permissions..."
              sudo chmod 660 /var/run/docker.sock
            fi
            
            return 0
          }

          # Function to run Docker commands with or without sudo as needed
          docker_cmd() {
            if check_docker_permissions; then
              docker "$@"
            else
              sudo docker "$@"
            fi
          }

          # Function to run Docker Compose commands with or without sudo
          docker_compose_cmd() {
            if check_docker_permissions; then
              docker-compose "$@"
            else
              sudo docker-compose "$@"
            fi
          }

          cd /app

          # Verify Docker installation and permissions
          echo "Verifying Docker setup..."
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker is not installed. Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            rm get-docker.sh
          fi

          # Check and fix Docker permissions
          check_docker_socket

          # Clean up existing deployment
          echo "Cleaning up existing deployment..."
          docker_compose_cmd down -v || true
          docker_cmd system prune -af --force || true

          # Ensure proper permissions for application files
          sudo chown -R $USER:$USER .
          chmod 755 .
          chmod 600 .env

          echo "Starting services..."
          if ! docker_compose_cmd up -d --build --force-recreate; then
            echo "Failed to start services. Checking logs..."
            docker_compose_cmd logs
            exit 1
          fi

          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 10

          # Check if containers are running
          if ! docker_compose_cmd ps | grep -q "Up"; then
            echo "Services failed to start. Checking logs..."
            docker_compose_cmd logs
            exit 1
          fi

          echo "Deployment completed successfully"
          EOSSH

          # Make the script executable
          chmod +x deploy_remote.sh

          # Copy deployment files
          echo "Copying deployment files..."
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env deploy_remote.sh \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/

          # Execute deployment
          echo "Executing deployment script..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "cd /app && bash deploy_remote.sh"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deploy_remote.sh
