name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: |
          npm run build
          ls -la dist/

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Prepare Server Directory Structure
        run: |
          echo "Setting up server directory structure..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            # Create application directory if it doesn't exist
            sudo mkdir -p /app
            
            # Set ownership of the app directory to our user
            sudo chown -R $USER:$USER /app
            
            # Set proper directory permissions
            sudo chmod 755 /app
            
            # Create necessary subdirectories
            mkdir -p /app/dist
            
            echo "Directory permissions:"
            ls -la /app
          '

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # First, create the deployment script locally
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e

          echo "Starting deployment process..."
          cd /app

          # Ensure proper permissions
          sudo chown -R $USER:$USER .
          chmod 755 .

          # Stop and remove existing containers
          docker-compose down -v || true
          docker system prune -af || true

          # Check and free port 80 if needed
          if sudo lsof -i :80 >/dev/null 2>&1; then
            echo "Freeing port 80..."
            sudo lsof -t -i:80 | xargs -r sudo kill -9
          fi

          # Start containers with proper error handling
          if ! docker-compose up -d --build --force-recreate; then
            echo "Failed to start containers"
            docker-compose logs
            exit 1
          fi

          # Wait for containers to be healthy
          echo "Waiting for containers to be healthy..."
          sleep 10

          # Verify deployment
          if ! curl -s -f http://localhost:80 > /dev/null; then
            echo "Deployment verification failed"
            docker-compose logs
            exit 1
          fi

          echo "Deployment completed successfully"
          EOF

          # Make the script executable
          chmod +x deploy.sh

          echo "Copying deployment files..."
          # Create a temporary directory for deployment files
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'mkdir -p /app/tmp'
          
          # Copy files to temporary directory first
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env deploy.sh \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/tmp/

          # Move files to final location with proper permissions
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} '
            cd /app
            mv tmp/* .
            rmdir tmp
            chmod +x deploy.sh
            
            # Set proper file permissions
            chmod 644 docker-compose.yml Dockerfile nginx.conf .env
            
            # Execute deployment script
            ./deploy.sh
          '

      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            DEPLOY_STATUS="${{ job.status }}"
            DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            curl -X POST \
              -H "Authorization: Bearer $RESEND_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.resend.com/emails \
              -d '{
                "from": "notifications@hassan-adam.com",
                "to": "haskhr@hotmail.com",
                "subject": "Deployment Status: '"$DEPLOY_STATUS"'",
                "html": "
                  <h2>Deployment Status: '"$DEPLOY_STATUS"'</h2>
                  <p><strong>Repository:</strong> '"${{ github.repository }}"'</p>
                  <p><strong>Branch:</strong> '"${GITHUB_REF#refs/heads/}"'</p>
                  <p><strong>Commit:</strong> '"${{ github.sha }}"'</p>
                  <p><strong>Triggered by:</strong> '"${{ github.actor }}"'</p>
                  <p><strong>Deployment Time:</strong> '"$DEPLOY_TIME"'</p>
                "
              }'
          fi

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy_key
