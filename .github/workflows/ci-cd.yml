# This is our main CI/CD pipeline configuration that handles building and deploying
# the React application. The workflow is designed to be robust and informative,
# with proper error handling at each step.
name: CI/CD Pipeline

# Define when this workflow should run
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define environment variables used throughout the workflow
env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/app'
  NGINX_CONTAINER: 'web_app'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Define environment variables, including secrets
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          npm ci
          
          # Install essential build dependencies
          npm install @vitejs/plugin-react-swc vite @types/node --save-dev
          
          # Verify critical dependencies
          npm list vite @vitejs/plugin-react-swc react react-dom || true

      - name: Setup build configuration
        run: |
          echo "Creating Vite configuration..."
          cat > vite.config.ts << 'EOF'
          import { defineConfig } from 'vite'
          import react from '@vitejs/plugin-react-swc'
          import path from 'path'

          export default defineConfig({
            plugins: [react()],
            build: {
              outDir: 'dist',
              sourcemap: true,
              rollupOptions: {
                output: {
                  manualChunks: (id) => {
                    if (id.includes('node_modules')) {
                      return 'vendor'
                    }
                  },
                  entryFileNames: 'assets/[name]-[hash].js',
                  chunkFileNames: 'assets/[name]-[hash].js',
                  assetFileNames: 'assets/[name]-[hash].[ext]'
                }
              }
            },
            resolve: {
              alias: {
                '@': path.resolve(__dirname, './src')
              }
            }
          })
          EOF

      - name: Build with verification
        run: |
          echo "=== Starting Build Process ==="
          echo "Node version: $(node -v)"
          echo "npm version: $(npm -v)"
          
          # Clean previous build
          rm -rf dist
          
          # Run build
          npm run build --verbose
          
          # Verify build output
          echo "Verifying build output..."
          if [ ! -d "dist" ]; then
            echo "Error: Build failed - dist directory not found"
            exit 1
          fi
          
          echo "Checking for JavaScript files..."
          JS_FILES=$(find dist -name "*.js" | tee /dev/stderr | wc -l)
          if [ "$JS_FILES" -eq 0 ]; then
            echo "Error: No JavaScript bundles found!"
            exit 1
          fi
          
          echo "Build output structure:"
          find dist -type f -exec ls -l {} \;

      - name: Create Nginx configuration
        run: |
          cat > nginx.conf << 'EOF'
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log debug;
          pid /var/run/nginx.pid;

          events {
              worker_connections 1024;
          }

          http {
              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              log_format debug_log '$remote_addr - $remote_user [$time_local] '
                                '"$request" $status $body_bytes_sent '
                                '"$http_referer" "$http_user_agent" '
                                'rt=$request_time uct="$upstream_connect_time" '
                                'uht="$upstream_header_time" urt="$upstream_response_time" '
                                'file="$request_filename" root="$document_root"';

              access_log /var/log/nginx/access.log debug_log;

              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;

              server {
                  listen 80;
                  server_name hassan-adam.com www.hassan-adam.com localhost;
                  
                  root /usr/share/nginx/html;
                  index index.html;
                  
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header Referrer-Policy "no-referrer-when-unsafe" always;
                  add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: blob: https:; font-src 'self' data: https:;" always;

                  location / {
                      try_files $uri $uri/ /index.html;
                      add_header Cache-Control "no-store, no-cache, must-revalidate";
                  }

                  location ~* \.js$ {
                      add_header Content-Type application/javascript;
                      add_header Cache-Control "public, max-age=31536000";
                      try_files $uri =404;
                  }

                  location /assets/ {
                      alias /usr/share/nginx/html/assets/;
                      add_header Cache-Control "public, max-age=31536000";
                      try_files $uri =404;
                  }

                  error_page 404 /index.html;
                  error_page 500 502 503 504 /50x.html;
              }
          }
          EOF

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          cd /app

          # Stop existing containers
          docker-compose down -v || true
          docker system prune -af --force || true

          # Ensure proper permissions
          sudo chown -R $USER:$USER .
          chmod 755 .
          chmod 600 .env

          # Start services
          docker-compose up -d --build --force-recreate

          # Verify deployment
          echo "Waiting for services to start..."
          sleep 10

          # Test nginx configuration
          docker exec web_app nginx -t

          # Check service status
          docker exec web_app curl -I http://localhost

          # Verify JavaScript files are accessible
          for js in $(find /usr/share/nginx/html/assets -name "*.js"); do
            filename=$(basename $js)
            echo "Testing $filename..."
            docker exec web_app curl -I "http://localhost/assets/$filename"
          done

          echo "Deployment completed"
          EOF

          # Copy files to server
          echo "Copying deployment files..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ${{ env.DEPLOY_PATH }}"
          
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml Dockerfile nginx.conf .env deploy.sh \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_PATH }}/

          # Copy application files
          echo "Copying application files..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "mkdir -p ${{ env.DEPLOY_PATH }}/dist"
          
          scp -i ~/.ssh/deploy_key -r \
            dist/* \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.DEPLOY_PATH }}/dist/

          # Execute deployment
          echo "Executing deployment..."
          ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "cd ${{ env.DEPLOY_PATH }} && chmod +x deploy.sh && ./deploy.sh"

      - name: Send Deployment Status Email
        if: always()
        run: |
          if [ -n "$RESEND_API_KEY" ]; then
            DEPLOY_STATUS="${{ job.status }}"
            DEPLOY_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            curl -X POST \
              -H "Authorization: Bearer $RESEND_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.resend.com/emails \
              -d '{
                "from": "notifications@hassan-adam.com",
                "to": "haskhr@hotmail.com",
                "subject": "Deployment Status: '"$DEPLOY_STATUS"'",
                "html": "
                  <h2>Deployment Status: '"$DEPLOY_STATUS"'</h2>
                  <p><strong>Repository:</strong> '"${{ github.repository }}"'</p>
                  <p><strong>Branch:</strong> '"${GITHUB_REF#refs/heads/}"'</p>
                  <p><strong>Commit:</strong> '"${{ github.sha }}"'</p>
                  <p><strong>Triggered by:</strong> '"${{ github.actor }}"'</p>
                  <p><strong>Deployment Time:</strong> '"$DEPLOY_TIME"'</p>
                "
              }'
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deploy.sh
